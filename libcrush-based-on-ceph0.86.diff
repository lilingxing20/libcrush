diff --git a/src/crush/CrushWrapper.h b/src/crush/CrushWrapper.h
index 2d1fa95..2ebf387 100644
--- a/src/crush/CrushWrapper.h
+++ b/src/crush/CrushWrapper.h
@@ -55,9 +55,9 @@ public:
   std::map<int32_t, string> type_map; /* bucket/device type names */
   std::map<int32_t, string> name_map; /* bucket/device names */
   std::map<int32_t, string> rule_name_map;
+  struct crush_map *crush;
 
 private:
-  struct crush_map *crush;
   /* reverse maps */
   bool have_rmaps;
   std::map<string, int> type_rmap, name_rmap, rule_name_rmap;
diff --git a/src/include/rados/librados.hpp b/src/include/rados/librados.hpp
index e6e40b2..e8e2009 100644
--- a/src/include/rados/librados.hpp
+++ b/src/include/rados/librados.hpp
@@ -14,6 +14,10 @@
 #include "librados.h"
 #include "rados_types.hpp"
 
+extern "C" {
+#include "crush/crush.h"
+}
+
 namespace libradosstriper
 {
   class RadosStriper;
@@ -936,6 +940,9 @@ namespace librados
 
     /// get/wait for the most recent osdmap
     int wait_for_latest_osdmap();
+    const struct crush_map* get_crushmap();
+    void put_crushmap();
+    std::vector<__u32> get_osd_weights();
 
     /*
      * pool aio
diff --git a/src/librados/RadosClient.h b/src/librados/RadosClient.h
index 9a394b3..3459c87 100755
--- a/src/librados/RadosClient.h
+++ b/src/librados/RadosClient.h
@@ -59,7 +59,6 @@ private:
   bool ms_handle_reset(Connection *con);
   void ms_handle_remote_reset(Connection *con);
 
-  Objecter *objecter;
 
   Mutex lock;
   Cond cond;
@@ -71,7 +70,6 @@ private:
   void *log_cb_arg;
   string log_watch;
 
-  int wait_for_osdmap();
 
 public:
   Finisher finisher;
@@ -85,6 +83,7 @@ public:
   uint64_t get_instance_id();
 
   int wait_for_latest_osdmap();
+  int wait_for_osdmap();
 
   int create_ioctx(const char *name, IoCtxImpl **io);
 
@@ -109,6 +108,7 @@ public:
   // watch/notify
   uint64_t max_watch_notify_cookie;
   map<uint64_t, librados::WatchNotifyInfo *> watch_notify_info;
+  Objecter *objecter;
 
   void register_watch_notify_callback(librados::WatchNotifyInfo *wc,
 				      uint64_t *cookie);
diff --git a/src/librados/librados.cc b/src/librados/librados.cc
index 45bde1a..9067a0c 100644
--- a/src/librados/librados.cc
+++ b/src/librados/librados.cc
@@ -1779,6 +1779,30 @@ int librados::Rados::wait_for_latest_osdmap()
   return client->wait_for_latest_osdmap();
 }
 
+const struct crush_map* librados::Rados::get_crushmap()
+{
+  int ret = client->wait_for_osdmap();
+  if (ret < 0)
+    return NULL;
+  return client->objecter->get_osdmap_read()->crush->crush;
+}
+
+void librados::Rados::put_crushmap()
+{
+  client->objecter->put_osdmap_read();
+}
+
+std::vector<__u32> librados::Rados::get_osd_weights()
+{
+  std::vector<__u32> weights;
+  int ret = client->wait_for_osdmap();
+  if (ret < 0)
+    return weights;
+  weights = client->objecter->get_osdmap_read()->osd_weight;
+  client->objecter->put_osdmap_read();
+  return weights;
+}
+
 librados::PoolAsyncCompletion *librados::Rados::pool_async_create_completion()
 {
   PoolAsyncCompletionImpl *c = new PoolAsyncCompletionImpl;
diff --git a/src/osd/OSDMap.h b/src/osd/OSDMap.h
index aafadb6..56cd379 100644
--- a/src/osd/OSDMap.h
+++ b/src/osd/OSDMap.h
@@ -220,7 +220,6 @@ private:
   };
   ceph::shared_ptr<addrs_s> osd_addrs;
 
-  vector<__u32>   osd_weight;   // 16.16 fixed point, 0x10000 = "in", 0 = "out"
   vector<osd_info_t> osd_info;
   ceph::shared_ptr< map<pg_t,vector<int32_t> > > pg_temp;  // temp pg mapping (e.g. while we rebuild)
   ceph::shared_ptr< map<pg_t,int32_t > > primary_temp;  // temp primary mapping (e.g. while we rebuild)
@@ -242,6 +241,7 @@ private:
 
  public:
   ceph::shared_ptr<CrushWrapper> crush;       // hierarchical map
+  vector<__u32>   osd_weight;   // 16.16 fixed point, 0x10000 = "in", 0 = "out"
 
   friend class OSDMonitor;
   friend class PGMonitor;
